#include <iostream>
using namespace std;

const int MAX_SIZE = 1000;

// Define a Node struct to hold the key-value pairs
class Node {
public:
    int key;
    int value;
    Node* next;
};

// Define the HashTable class
class HashTable {
private:
    Node* table[MAX_SIZE]; // The hash table itself

    // A hash function to compute the index of a given key
    int hash(int key) {
        return key % MAX_SIZE;
    }

public:
    // Constructor to initialize the hash table
    HashTable() {
        for (int i = 0; i < MAX_SIZE; i++) {
            table[i] = nullptr;
        }
    }

    // Function to insert a new key-value pair into the hash table
    void insert(int key, int value) {
        // Compute the index of the key using the hash function
        int index = hash(key);

        // Create a new Node to hold the key-value pair
        Node* n = new Node;
        n->key = key;
        n->value = value;
        n->next = nullptr;

        // Check if there is already a Node with the same key in the table
        Node* curr = table[index];
        while (curr != nullptr) {
            if (curr->key == key) {
                curr->value = value; // Update the value
                return;
            }
            curr = curr->next;
        }

        // If not, add the new Node to the beginning of the linked list at that index
        n->next = table[index];
        table[index] = n;
    }

    // Function to get the value associated with a given key
    int get(int key) {
        // Compute the index of the key using the hash function
        int index = hash(key);

        // Traverse the linked list at that index and return the value if found
        Node* curr = table[index];
        while (curr != nullptr) {
            if (curr->key == key) {
                return curr->value;
            }
            curr = curr->next;
        }

        // If the key is not found, return -1 (or some other default value)
        return -1;
    }

    // Function to remove a key-value pair from the hash table
    void remove(int key) {
        // Compute the index of the key using the hash function
        int index = hash(key);

        // Traverse the linked list at that index and remove the Node with the given key, if it exists
        Node* curr = table[index];
        Node* prev = nullptr;
        while (curr != nullptr) {
            if (curr->key == key) {
                if (prev == nullptr) {
                    table[index] = curr->next;
                } else {
                    prev->next = curr->next;
                }
                delete curr;
                return;
            }
            prev = curr;
            curr = curr->next;
        }
    }
};

// Test the implementation
int main() {
    HashTable ht;
    
    ht.insert(1, 10);
    ht.insert(2, 20);
    ht.insert(3, 30);
    
    cout << ht.get(1) << endl; // Output: 10
    cout << ht.get(2) << endl; // Output: 20
    cout << ht.get(3) << endl; // Output: 30
    
    ht.remove(2);
    
    cout << ht.get(1) << endl; // Output: 10
    cout << ht.get(2) << endl; // Output: -1 (not
}
