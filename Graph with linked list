#include <iostream>
#include <list>

using namespace std;

class Graph {
private:
    int V; // number of vertices
    list<int> *adjList; // pointer to an array of adjacency lists

public:
    // constructor to create a graph with given number of vertices
    Graph(int vertices) {
        V = vertices;
        adjList = new list<int>[V]; // dynamically allocate array of V lists
    }

    // function to add an edge to the graph
    void addEdge(int v, int w) {
        adjList[v].push_back(w); // add w to v's list
        adjList[w].push_back(v); // add v to w's list
    }

    // function to print the graph
    void printGraph() {
        for (int v = 0; v < V; v++) {
            cout << "Adjacency list of vertex " << v << ":\n";
            // iterate over the adjacency list of vertex v
            for (auto u : adjList[v]) {
                cout << u << " "; // print the adjacent vertex
            }
            cout << endl; // move to next line for next vertex
        }
    }

    // destructor to free dynamically allocated memory
    ~Graph() {
        delete[] adjList;
    }
};

int main() {
    // create a graph with 5 vertices
    Graph g(5);

    // add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // print the graph
    g.printGraph();

    return 0;
}

