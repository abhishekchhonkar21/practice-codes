#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
private:
    int V;
    vector<vector<int>> adjList;

public:
    Graph(int vertices) {
        V = vertices;
        adjList.resize(V);
    }

    void addEdge(int v, int w) {
        adjList[v].push_back(w);
        adjList[w].push_back(v);
    }

    void print() {
        for (int i = 0; i < V; i++) {
            cout << i << ":";
            for (int j = 0; j < adjList[i].size(); j++) {
                cout << adjList[i][j] << " ";
            }
            cout << endl;
        }
    }

    void DFS(int startVertex) {
        vector<bool> visited(V, false);
        stack<int> stack;

        cout << "DFS starting from vertex " << startVertex << ": ";

        stack.push(startVertex);
        visited[startVertex] = true;

        while (!stack.empty()) {
            int vertex = stack.top();
            stack.pop();
            cout << vertex << " ";

            for (int i = 0; i < adjList[vertex].size(); i++) {
                int neighbour = adjList[vertex][i];
                if (!visited[neighbour]) {
                    stack.push(neighbour);
                    visited[neighbour] = true;
                }
            }
        }

        cout << endl;
    }
};

int main() {
    // create a graph with 5 vertices
    Graph g(5);

    // add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // print the graph represented by the adjacency list
    g.print();

    // perform DFS starting from vertex 2 using stack
    g.DFS(2);

    return 0;
}
