#include <iostream>
using namespace std;

const int max_size = 1000;

class HashTable {
private:
    int table[max_size];
    int hash1(int key) {
        return key % max_size;
    }
    int hash2(int key) {
        return 1 + (key % (max_size - 1));
    }

public:
    HashTable() {
        for (int i = 0; i < max_size; i++) {
            table[i] = -1;
        }
    }

    void insert(int key) {
        int index = hash1(key);
        int offset = hash2(key);
        while (table[index] != -1) {
            index = (index + offset) % max_size;
        }
        table[index] = key;
    }

    bool search(int key) {
        int index = hash1(key);
        int offset = hash2(key);
        while (table[index] != -1) {
            if (table[index] == key) {
                return true;
            }
            index = (index + offset) % max_size;
        }
        return false;
    }

    void remove(int key) {
        int index = hash1(key);
        int offset = hash2(key);
        while (table[index] != -1) {
            if (table[index] == key) {
                table[index] = -1;
                return;
            }
            index = (index + offset) % max_size;
        }
    }
    int get(int key) {
           int index = hash1(key);
           if(table[index] == key) {
               return index;
           } else {
               int index2 = hash2(key);
               int i = 1;
               while(true) {
                   int newIndex = (index + i * index2) % max_size;
                   if(table[newIndex] == key) {
                       return newIndex;
                   }
                   i++;
               }
           }
           return -1;
       }
};

int main() {
    HashTable ht;
    ht.insert(10);
    ht.insert(20);
    ht.insert(30);

    cout << ht.get(10) << endl;
    cout << ht.get(20) << endl;
    cout << ht.get(30) << endl;

    ht.remove(20);

    cout << ht.search(10) << endl;
    cout << ht.search(20) << endl;

    return 0;
}

