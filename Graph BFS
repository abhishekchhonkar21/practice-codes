#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
private:
    int V; // number of vertices
    vector<vector<int>> adjList; // adjacency list

public:
    // constructor to create a graph with given number of vertices
    Graph(int vertices) {
        V = vertices;
        adjList.resize(V);
    }

    // function to add an edge to the graph
    void addEdge(int v, int w) {
        adjList[v].push_back(w);
        adjList[w].push_back(v);
    }

    // function to print the graph represented by the adjacency list
    void printGraph() {
        cout << "Adjacency list of the graph:\n";
        for (int i = 0; i < V; i++) {
            cout << i << ": ";
            for (int j = 0; j < adjList[i].size(); j++) {
                cout << adjList[i][j] << " ";
            }
            cout << endl;
        }
    }

    // function to perform BFS on the graph
    void BFS(int startVertex) {
        vector<bool> visited(V, false); // mark all vertices as not visited
        queue<int> q; // create a queue for BFS

        visited[startVertex] = true; // mark the start vertex as visited
        q.push(startVertex); // enqueue the start vertex

        cout << "BFS starting from vertex " << startVertex << ": ";

        while (!q.empty()) {
            int currentVertex = q.front();
            q.pop();
            cout << currentVertex << " ";

            // explore all neighbors of the current vertex
            for (int i = 0; i < adjList[currentVertex].size(); i++) {
                int neighbor = adjList[currentVertex][i];
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }

        cout << endl;
    }

    // destructor to free dynamically allocated memory
    ~Graph() {}
};

int main() {
    // create a graph with 5 vertices
    Graph g(5);

    // add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // print the graph represented by the adjacency list
    g.printGraph();

    // perform BFS starting from vertex 2
    g.BFS(2);

    return 0;
}
