#include<iostream>
using namespace std;

const int max_size = 1000;

class HashTable {
    
private:
    int keys[max_size];
    int values[max_size];
    
public:
    HashTable() {
        // constructor initializes all keys and values to -1
        for (int i = 0; i < max_size; i++) {
            keys[i] = -1;
            values[i] = -1;
        }
    }
    
    int hash(int key) {
        // hash function to determine the index of the key in the table
        return key % max_size;
    }
    
    void insert(int Key, int Value) {
        int index = hash(Key);
        int i = 1;
        while (keys[index] != -1) {
            // if the index is already occupied, probe using quadratic probing
            index = (index + i * i) % max_size;
            i++;
        }
        keys[index] = Key;
        values[index] = Value;
    }
    
    int get(int Key) {
        int index = hash(Key);
        int i = 1;
        while (keys[index] != Key && keys[index] != -1) {
            // if the key is not found, probe using quadratic probing
            index = (index + i * i) % max_size;
            i++;
        }
        if (keys[index] == Key) {
            return values[index];
        } else {
            return -1; // Key not found
        }
    }
    
    void remove(int Key) {
        int index = hash(Key);
        int i = 1;
        while (keys[index] != Key && keys[index] != -1) {
            // if the key is not found, probe using quadratic probing
            index = (index + i * i) % max_size;
            i++;
        }
        if (keys[index] == Key) {
            keys[index] = -1;
            values[index] = -1;
        } else {
            cout << "Key not found in table" << endl;
        }
    }
};

int main() {
    HashTable ht;
    ht.insert(1, 180);
    ht.insert(2, 240);
    ht.insert(3, 310);
    
    cout << ht.get(1) << endl;
    cout << ht.get(2) << endl;
    cout << ht.get(3) << endl;
    
    ht.remove(2);
    
    cout << ht.get(1) << endl;
    cout << ht.get(2) << endl;
    
    return 0;
}
