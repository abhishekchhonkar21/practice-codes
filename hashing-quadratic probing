#include<iostream>
using namespace std;

const int max_size = 1000;

class node{
public:
    int key;
    int value;
    node* next;
};

class HashTable{
    
private:
    node* table[max_size];
    int hash(int key){
        return key % max_size;
    }
    
public:
    HashTable(){
        for(int i = 0; i<max_size; i++){
            table[i] = NULL;
        }
    }
    
    void insert(int Key,int Value){
        
        int index = hash(Key);
        int i = 0;
        while(table[(index+i*i)%max_size]!=NULL && table[(index+i*i)%max_size]->key!=Key){
            i++;
        }
        if(table[(index+i*i)%max_size]!=NULL){
            table[(index+i*i)%max_size]->value = Value;
            return;
        }
        node* n = new node;
        n->key = Key;
        n->value = Value;
        n->next = NULL;
        table[(index+i*i)%max_size] = n;
    }
    
    int get(int Key){
        
        int index = hash(Key);
        int i = 0;
        while(table[(index+i*i)%max_size]!=NULL){
            if(table[(index+i*i)%max_size]->key == Key){
                return table[(index+i*i)%max_size]->value;
            }
            i++;
        }
        return -1;
    }
    
    void remove(int Key){
        
        int index = hash(Key);
        int i = 0;
        while(table[(index+i*i)%max_size]!=NULL){
            if(table[(index+i*i)%max_size]->key == Key){
                node* temp = table[(index+i*i)%max_size];
                table[(index+i*i)%max_size] = NULL;
                delete temp;
                i++;
                while(table[(index+i*i)%max_size]!=NULL){
                    node* n = table[(index+i*i)%max_size];
                    table[(index+i*i)%max_size] = NULL;
                    insert(n->key,n->value);
                    delete n;
                    i++;
                }
                return;
            }
            i++;
        }
    }
};

int main(){
    
    class HashTable ht;
    ht.insert(1, 13);
    ht.insert(2, 240);
    ht.insert(3, 301);
    
    cout << ht.get(1) << endl;
    cout << ht.get(2) << endl;
    cout << ht.get(3) << endl;
    
    ht.remove(2);
    
    cout << ht.get(1) << endl;
    cout << ht.get(2) << endl;
    
    return 0;
}

