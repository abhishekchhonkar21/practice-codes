#include<iostream>
#include<vector>
#include<set>

using namespace std;

class graph{
private:
    int V;
    vector<vector<pair<int, int>>> adjList; // vector of pairs to represent edge and weight

public:
    graph(int vertices){
        V = vertices;
        adjList.resize(V);
    }

    void addEdge(int v, int w, int weight){ // add edge with weight
        adjList[v].push_back(make_pair(w, weight)); // add w to v's adjacency list with weight
        adjList[w].push_back(make_pair(v, weight)); // add v to w's adjacency list with weight
    }

    void print(){
        for(int i = 0; i<V; i++){
            cout<<i<<":";
            for(int j=0;j<adjList[i].size();j++){
                cout<<"("<<adjList[i][j].first<<","<<adjList[i][j].second<<")"<<" "; // print the vertices and weights
            }
            cout<<endl;
        }
    }

    void dijkstra(int startvertex){
        vector<int> distance(V, INT_MAX); // initialize all distances to infinity
        distance[startvertex] = 0; // distance from startvertex to itself is 0
        set<pair<int,int>> s; // set to keep track of vertices and their distances

        s.insert(make_pair(0,startvertex)); // insert the startvertex with distance 0

        while(!s.empty()){
            pair<int, int> tmp = *(s.begin()); // get the vertex with minimum distance from set
            s.erase(s.begin()); // remove the vertex from set

            int u = tmp.second; // get the vertex
            for(int i=0; i<adjList[u].size(); i++){
                int v = adjList[u][i].first; // get the neighbour vertex
                int weight = adjList[u][i].second; // get the weight of the edge between u and v

                if(distance[v] > distance[u] + weight){ // if the distance through u is less than the current distance to v
                    if(distance[v]!=INT_MAX){ // remove the old distance, if present
                        s.erase(s.find(make_pair(distance[v],v)));
                    }
                    distance[v] = distance[u] + weight; // update the distance to v
                    s.insert(make_pair(distance[v],v)); // insert v with new distance
                }
            }
        }

        cout << "Shortest distances from vertex " << startvertex << " to all other vertices: " << endl;
        for(int i = 0; i<V; i++){
            cout << i << ": " << distance[i] << endl; // print the shortest distance of each vertex from the startvertex
        }
    }
};


int main() {
    // create a graph with 5 vertices
    graph g(5);

    // add edges with weights to the graph
    g.addEdge(0, 1, 1);
    g.addEdge(0, 4, 4);
    g.addEdge(1, 2, 2);
    g.addEdge(1, 3, 4);
    g.addEdge(1, 4, 2);
    g.addEdge(2, 3, 1);
    g.addEdge(3, 4, 3);

    // print the graph represented by the adjacency list
    g.print();

    // perform Dijkstra's algorithm starting from vertex 2
    g.dijkstra(2);

    return 0;
}
