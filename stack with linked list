#include<iostream>
#include "stack.h"

using namespace std;
int main(){
    
    
    stack<char> s;
    s.push('h');
    s.push('e');
    s.push('l');
    s.push('l');
    s.push('o');
    while (!s.empty()) {
    cout<<s.top()<<endl;
        s.pop();
    }
    cout<<endl;
    return 0;
}



//stack header file





#ifndef stack_h
#define stack_h
template<typename T>class stack;

template<typename T>
class Node{
    
public:
    friend class stack<T>;
T data;
Node<T> *next;
Node (T d) {
data = d;
}
};

template<typename T>class stack{
    
    Node<T> * head;
   public:
       
       stack() {
   head = NULL;
   }
   void push(T data) {
   Node<T> * n = new Node<T>(data);
   n->next = head;
   head = n;
   }
   bool empty(){
   return head==NULL;
   }
   T top() {
   return head->data;
   }
    void pop() {
        if (head!=NULL) {
            Node<T> * temp = head;
            head=head->next;
            delete temp;
        }}
};

#endif /* stack_h */
