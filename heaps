#include <iostream>
#include <vector>

using namespace std;

class MaxHeap {
private:
    vector<int> heap;

    // Helper functions
    int parent(int i) {
        return (i - 1) / 2; // Calculate the index of the parent node
    }

    int leftChild(int i) {
        return 2 * i + 1; // Calculate the index of the left child node
    }

    int rightChild(int i) {
        return 2 * i + 2; // Calculate the index of the right child node
    }

    void heapifyUp(int i) {
        while (i > 0 && heap[i] > heap[parent(i)]) {
            // Swap the current node with its parent if it is larger
            swap(heap[i], heap[parent(i)]);
            i = parent(i);
        }
    }

    void heapifyDown(int i) {
        int n = heap.size();
        int largest = i;
        int left = leftChild(i);
        int right = rightChild(i);

        // Compare the left child with the current node
        if (left < n && heap[left] > heap[largest]) {
            largest = left;
        }

        // Compare the right child with the current node
        if (right < n && heap[right] > heap[largest]) {
            largest = right;
        }

        if (largest != i) {
            // Swap the current node with the largest child if necessary
            swap(heap[i], heap[largest]);
            heapifyDown(largest); // Recursively heapify the subtree rooted at the largest child
        }
    }

public:
    // Heap operations
    void insert(int val) {
        heap.push_back(val); // Insert the new element at the end of the heap
        int index = heap.size() - 1;
        heapifyUp(index); // Restore the MaxHeap property by moving the element up
    }

    int getMax() {
        if (heap.empty()) {
            cout << "Heap is empty!" << endl;
            return -1;
        }
        return heap[0]; // Return the maximum element at the root of the heap
    }

    int extractMax() {
        if (heap.empty()) {
            cout << "Heap is empty!" << endl;
            return -1;
        }

        int maxVal = heap[0]; // Store the maximum element to be extracted
        swap(heap[0], heap[heap.size() - 1]); // Swap the root with the last element
        heap.pop_back(); // Remove the last element (previously the root)
        heapifyDown(0); // Restore the MaxHeap property by moving the new root down

        return maxVal; // Return the extracted maximum element
    }
};

int main() {
    MaxHeap maxHeap;
    maxHeap.insert(5);
    maxHeap.insert(10);
    maxHeap.insert(7);
    maxHeap.insert(3);
    maxHeap.insert(8);

    cout << "Max element: " << maxHeap.getMax() << endl;

    int maxVal = maxHeap.extractMax();
    cout << "Extracted max element: " << maxVal << endl;

    cout << "Max element after extraction: " << maxHeap.getMax() << endl;

    return 0;
}
