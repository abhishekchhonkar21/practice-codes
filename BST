#include<iostream>
using namespace std;

class node {
public:
    int key;
    node* left;
    node* right;
    
    node(int data) {
        left = right = NULL;
        key = data;
    }
};

node* insert(node* root, int data) {
    if (root == NULL) {
        return new node(data);
    }
    
    // recursive case
    if (data < root->key) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    
    return root;
}

void inorderTraversal(node* root) {
    if (root == NULL) {
        return;
    }
    
    inorderTraversal(root->left);
    cout << root->key << " ";
    inorderTraversal(root->right);
}

void preorderTraversal(node* root) {
    if (root == NULL) {
        return;
    }
    
    cout << root->key << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postorderTraversal(node* root) {
    if (root == NULL) {
        return;
    }
    
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout << root->key << " ";
}

bool search(node* root, int x) {
    if (root == NULL) {
        return false;
    }
    
    if (root->key == x) {
        return true;
    }
    
    if (x < root->key) {
        return search(root->left, x);
    }
    
    return search(root->right, x);
}

node* findMin(node* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    
    return root;
}

node* findMax(node* root) {
    while (root->right != NULL) {
        root = root->right;
    }
    
    return root;
}

node* remove(node* root, int x) {
    if (root == NULL) {
        return NULL;
    } else if (x < root->key) {
        root->left = remove(root->left, x);
    } else if (x > root->key) {
        root->right = remove(root->right, x);
    } else {
        // When the current node matches the key
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        } else if (root->left == NULL) {
            node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            node* temp = root->left;
            delete root;
            return temp;
        } else {
            // Node has two children
            node* minRight = findMin(root->right);
            root->key = minRight->key;
            root->right = remove(root->right, minRight->key);
        }
    }
    return root;
}


int main() {
    node* root = NULL;
    int arr[] = {8, 3, 10, 1, 6, 14, 4, 7, 13};
    
    for (int x : arr) {
        root = insert(root, x);
    }
    
    cout << "Inorder traversal: ";
    inorderTraversal(root);
    cout << endl;
    
    cout << "Preorder traversal: ";
    preorderTraversal(root);
    cout << endl;
    
    cout << "Postorder traversal: ";
    postorderTraversal(root);
    cout <<endl;
    remove(root, 3);
    
    cout << "Inorder traversal after removing 3: ";
    inorderTraversal(root);
    cout << endl;
    
    cout << "Maximum value in the tree: " << findMax(root)->key << endl;
    
    return 0;
}

