#include<iostream>
#include<vector>
using namespace std;
void merge(int arr[], int middle, int left, int right){

    int n1 = middle - left + 1;
    int n2 = right - middle;

    //create temporary arrays
    int l[n1], r[n2];

    //copy data to temporary arrays
    for(int i = 0; i<n1; i++){
        l[i] = arr[left + i];
    }
    for(int i = 0; i<n2; i++){
        r[i] = arr[middle + 1 + i];
    }

    //merge these temporary arrays in the original array
    int i=0; //initial index of the first subarray
    int j=0; //initial index of the second subarray
    int k=left; //initial index of the merge subarray

    while(i<n1 and j<n2){

        if(l[i]<r[j]){

            arr[k] = l[i];
            i++;
        }
        else{
            arr[k] = r[j];
            j++;
        }
        k++;
    }

    //to add remaining elements
    while(i<n1){
        arr[k] = l[i];
        i++;
        k++;
    }
    while(j<n2){
        arr[k] = r[j];
        j++;
        k++;
    }

}


//merge sort function
void mergesort(int arr[], int left , int right){
    
    if(left<right){
        int middle = left + (right - left)/2;
        
        //sort first and second half
        mergesort(arr, left, middle);
        
        mergesort(arr, middle + 1, right);
        
        //merge the sorted halves
        merge(arr, middle, left, right);
        
    }
    
}

int main(){
    
    int arr[7] = {2,4,2,67,8,5,3};
    mergesort(arr, 0, 6);
    
    for(int i=0; i<7; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}
