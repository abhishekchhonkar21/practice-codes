#include <iostream>
#include <vector>

using namespace std;

class Graph {
private:
    int V; // number of vertices
    vector<vector<int>> adjMatrix; // adjacency matrix

public:
    // constructor to create a graph with given number of vertices
    Graph(int vertices) {
        V = vertices;
        adjMatrix.resize(V, vector<int>(V, 0)); // initialize adjacency matrix with all zeros
    }

    // function to add an edge to the graph
    void addEdge(int v, int w) {
        adjMatrix[v][w] = 1; // mark edge in the adjacency matrix
        adjMatrix[w][v] = 1; // mark edge in the adjacency matrix
    }

    // function to print the graph represented by the adjacency matrix
    void printGraph() {
        cout << "Adjacency matrix of the graph:\n";
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                cout << adjMatrix[i][j] << " ";
            }
            cout << endl; // move to next line for next row
        }
    }

    // destructor to free dynamically allocated memory
    ~Graph() {}
};

int main() {
    // create a graph with 5 vertices
    Graph g(5);

    // add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // print the graph represented by the adjacency matrix
    g.printGraph();

    return 0;
}

