//using vector

#include<iostream>
#include<vector>
using namespace std;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(vector<int>& v, int low, int high){
    int pivot = v[high];
    int i = low - 1;
    
    for(int j=low; j<high; j++){
        if(v[j]<pivot){
            i++;
            swap(v[i], v[j]);
        }
    }
    swap(v[i+1], v[high]);
    return i+1;
}

void quicksort(vector<int>& v, int low, int high){
    if(low < high){
        int pivotindex = partition(v, low, high);
        quicksort(v, low, pivotindex-1);
        quicksort(v, pivotindex+1, high);
    }
}

int main(){
    vector<int> v = {7,2,1,5,3,7,4,6,9};
    quicksort(v, 0, v.size() - 1);
    
    for(int i=0; i<v.size(); i++){
        cout<<v[i]<<" ";
    }
    cout<<endl;
}


//using array

#include<iostream>
using namespace std;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(int arr[], int low, int high){
    int pivot = arr[high];
    int i = low - 1;
    
    for(int j=low; j<high; j++){
        if(arr[j]<pivot){
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return i+1;
}

void quicksort(int arr[], int low, int high){
    if(low < high){
        int pivotindex = partition(arr, low, high);
        quicksort(arr, low, pivotindex-1);
        quicksort(arr, pivotindex+1, high);
    }
}

int main(){
    int arr[] = {7,2,1,5,3,7,4,6,9};
    int n = sizeof(arr)/sizeof(arr[0]);
    quicksort(arr, 0, n-1);
    
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

