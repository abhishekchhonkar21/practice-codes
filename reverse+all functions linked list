#include<iostream>
using namespace std;

class list;
class node{
     public:
   int data;
   node* next;
  
   
   node(int d):data(d),next(NULL){};
   int getdata(){
       return data;
   }
   /* ~node(){
        if(next!=NULL){
            delete next;
        }
        cout<<"deleting with node data"<<data<<endl;
        
    }*/
    
   friend class list;
   
};

class list{
public:
    node* head;
    node* tail;
    
    int searchHelper(node* start, int key){
        //base case
        if(start==NULL){
            return -1;
        }
        //value matches
        if(start->data==key){
            return 0;
        }
        //remaining part of the linked list
        int subIdx = searchHelper(start->next,key);
        if(subIdx==-1){
            return -1;
        }
        return subIdx + 1;
            
        
    }
    
    list():head(NULL),tail(NULL){}
    
    node*begin(){
        return head;
    }
    
    void push_front(int data){
        if(head==NULL){
            node*n = new node(data);
            head = tail = n;
        }
        else{
            node*n = new node(data);
            n->next = head;
            head=n;
        }
    }
    void push_back(int data){
        if(head==NULL){
            node* n = new node(data);
            head = tail = n;
        }
        else{
            node* n = new node(data);
            tail->next = n;
            tail=n;
        }
        
    }
    void insert(int data,int pos){
        if(pos==0){
            push_front(data);
            return;
            
        }
        
    
    //otherwise
    node* temp = head;
    for(int jump=1;jump<pos-1;jump++){
        temp->next;
    }
    node* n= new node(data);
    n->next = temp->next;
    temp->next=n;
    
    
}
    
    int search(int key){
     
            node * temp = head;
            int idx = 0;
     
            while(temp!=NULL){
                if(temp->data == key){
                    return idx;
                }
                idx++;
                temp = temp->next;
            }
            return -1;
        }
    
    int recursiveSearch(int key){
        int idx = searchHelper(head, key);
        return idx;
    }
    
    void pop_front(){
        node* temp = head;
        head = head->next;
        temp->next = NULL;
        delete temp;
    }
    
    void pop_back(){
        
        node* temp1 = head;
        node* temp2 = head;
        while(temp1->next!=NULL){
            temp2=temp1;
            temp1=temp1->next;
        }
        temp2->next=NULL;
        delete temp1;
        
    }
    
   /*~list(){
       if(head!=NULL){
           delete head;
            head=NULL;
        }
   
    
}*/
    
   /* void listreverse(){
        node* cur = head;
        node* prev = NULL;
        node* nxt;
        
        while(cur!=NULL){
            //save the next node
            nxt = cur->next;
            //make the current node point to previous
            cur->next = prev;
            //update prev and cur, take them 1 step forward
            prev = cur;
            cur = nxt;
            
        }
        head = prev;
    } */
};

void listreverse(node* &head){
    node* cur = head;
    node* prev = NULL;
    node* nxt;
    
    while(cur!=NULL){
        //save the next node
        nxt = cur->next;
        //make the current node point to previous
        cur->next = prev;
        //update prev and cur, take them 1 step forward
        prev = cur;
        cur = nxt;
        
    }
    head = prev;
}



int main(){
      list l;
    l.push_front(1);
    l.push_front(12);
    l.push_back(2);
    l.push_back(3);
    l.push_back(4);
    l.insert(45, 2);
    
   
   
    
    node* head = l.begin();
    //listreverse(head);
    while(head!=NULL){
        cout<<head->getdata()<<"->"<<endl;
        head=head->next;
    }
    
   
   
    
}
